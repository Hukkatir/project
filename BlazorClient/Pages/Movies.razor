@page "/movies"
@inject HttpClient Http

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">Кинополис</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/categories">Категории</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/movies">Фильмы</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="container mt-4">
    <h2>Все фильмы</h2>
    <div class="row row-cols-1 row-cols-md-4 g-4">
        @if (movies == null || files == null)
        {
            <p>Загрузка...</p>
        }
        else if (!movies.Any())
        {
            <p>Фильмы не найдены.</p>
        }
        else
        {
            @foreach (var movie in movies)
            {
                var posterUrl = files.FirstOrDefault(f => f.FileId == movie.MediaId)?.FileUrl;
                <div class="col">
                    <div class="card h-100">
                        <a href="/movie/@movie.MediaId">
                            <img src="@(posterUrl ?? "https://via.placeholder.com/300x450")" class="card-img-top"
                                alt="@movie.Title">
                        </a>
                        <div class="card-body">
                            <h5 class="card-title">@movie.Title</h5>
                            <p class="card-text">@movie.ReleaseDate.Year</p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<GetMediumResponse> movies;
    private List<GetFileResponse> files;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Загружаем данные о фильмах
            movies = await Http.GetFromJsonAsync<List<GetMediumResponse>>("api/Medium");

            // Загружаем данные о файлах
            files = await Http.GetFromJsonAsync<List<GetFileResponse>>("api/File");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке данных: {ex.Message}");
        }
    }

    public class GetMediumResponse
    {
        public int MediaId { get; set; }
        public string Title { get; set; }
        public DateTime ReleaseDate { get; set; }
        public string Plot { get; set; }
        public int Runtime { get; set; }
        public double ImdbRating { get; set; }
        public int Season { get; set; }
        public int Episode { get; set; }
        public int MediaTypeId { get; set; }
        public int CreatedBy { get; set; }
        public DateTime CreatedDateTime { get; set; }
    }

    public class GetFileResponse
    {
        public int FileId { get; set; }
        public string FileName { get; set; }
        public string FileUrl { get; set; }
        public int CategoryFileId { get; set; }
        public int CreatedBy { get; set; }
        public DateTime CreatedDateTime { get; set; }
        public int? UpdatedBy { get; set; }
        public DateTime? UpdatedDateTime { get; set; }
    }
}
